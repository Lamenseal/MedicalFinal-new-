#pragma checksum "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "817e92f3c50a3a51180e8cfe0610e8b77f090345"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Doctor_ListTest), @"mvc.1.0.view", @"/Views/Doctor/ListTest.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\_ViewImports.cshtml"
using Medical;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\_ViewImports.cshtml"
using Medical.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"817e92f3c50a3a51180e8cfe0610e8b77f090345", @"/Views/Doctor/ListTest.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"24de361111f0b04cb59052ed4f6ecd3219f4a4fd", @"/Views/_ViewImports.cshtml")]
    public class Views_Doctor_ListTest : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<Medical.Models.Doctor>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
  
    ViewData["Title"] = "ListTest";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            DefineSection("css", async() => {
                WriteLiteral(@"
    <style>
        .listFCN {
            color: black !important;
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #00EEFF;
            font-family: Jost, sans-serif !important;
        }

        .listFCS {
            font-size: 18px;
            height: 18px;
            line-height: 18px;
            margin-bottom: 6px;
            overflow: hidden;
            color: black !important;
            font-family: Jost, sans-serif !important;
        }

        .listFCC {
            color: black !important;
            font-size: 18px;
            height: 54px;
            line-height: 18px;
            overflow: hidden;
            font-family: Jost, sans-serif !important;
        }

        .listFCP {
            font-size: 0px;
            line-height: 0px;
            margin-bottom: 10px;
        }

        .input-selector {
            outline: none;
            border: none;
        }

        .mu");
                WriteLiteral(@"ti-selector {
            width: max-content;
            padding-right: 4px
        }

        .select-field {
            border: 1px solid black;
        }

        .select-field, .task, .list {
            width: 100%;
            background-color: white;
            padding:6px;
        }
        .team-item {
            background: #cbe0ff;
            margin-top:20px;
            border-radius:10px;
            padding:15px;
        }
        .list {
            box-shadow: 0px 30px 60px rgb(0,0,0,0.2);
            display: none;
            position: absolute;
            width: 214.16px;
            z-index: 10;
        }

        .down-arrow {
            font-size: 1.2rem;
            cursor: pointer;
            display: inline-block;
            transition: 0.2s linear;
        }

        .task {
            display: block;
            padding-left: 0;
        }

            .task span {
                float: right;
                font-size: 0.6rem;
  ");
                WriteLiteral(@"              padding-top: 6px;
            }

                .task span:hover {
                    background-color: aliceblue;
                }

        .show {
            display: block;
        }

        .rotate180 {
            transform: rotate(180deg);
        }

        .detail {
            background-color: #4F518C !important;
            border-color: #4F518C !important;
        }

        .slideInUp {
            background-color: #FE938C;
            border: 0.2px #666;
            border-radius: 25px 25px 25px 25px;
            margin: 10px 5px 10px 5px;
            width: 18.8888888888% !important;
        }

        #hateboot img {
            border-radius: 25px 25px 25px 25px !important;
            margin-top: 17px !important;
            position: relative;
        }

         .detail {
            color: white !important;
            margin:5px;
        }
        .buttonLoad {
            margin: 5px;
        }

        .dcimg {
            ");
                WriteLiteral("height: 250px;\r\n            object-fit: cover;\r\n        }\r\n        \r\n    </style>\r\n\r\n");
            }
            );
            WriteLiteral(@"<!-- Hero Start -->
<div class=""container-fluid bg-primary py-5 hero-header mb-5"">
    <div class=""row py-3"">
        <div class=""col-12 text-center"">
            <h3 class=""display-3 text-white animated zoomIn"">醫生清單</h3>
        </div>
    </div>
</div>
<!-- Hero End -->
<br>

");
#nullable restore
#line 151 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
 using (Html.BeginForm())
{

#line default
#line hidden
#nullable disable
            WriteLiteral("    <div>\r\n        <input type=\"button\" value=\"點我推薦醫生\" class=\"btn btn-success\"");
            BeginWriteAttribute("onclick", " onclick=\"", 3705, "\"", 3765, 3);
            WriteAttributeValue("", 3715, "location.href=\'", 3715, 15, true);
#nullable restore
#line 154 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
WriteAttributeValue("", 3730, Url.ActionLink("SugDoc","Doctor"), 3730, 34, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 3764, "\'", 3764, 1, true);
            EndWriteAttribute();
            WriteLiteral(" />\r\n    </div>\r\n    <div class=\"d-flex flex-wrap mt-2\">\r\n        <div class=\"muti-selector\">\r\n            <div class=\"select-field\">\r\n                <input type=\"text\"");
            BeginWriteAttribute("name", " name=\"", 3935, "\"", 3942, 0);
            EndWriteAttribute();
            WriteLiteral(" placeholder=\"篩選專長\" class=\"input-selector\" />\r\n                <span class=\"down-arrow\">&blacktriangledown;</span>\r\n\r\n            </div>\r\n            <div class=\"list\">\r\n                <label");
            BeginWriteAttribute("for", " for=\"", 4135, "\"", 4141, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""task"">
                    <input type=""checkbox"" class=""checkAll1"" name=""123"" id=""c"" onclick=""check_all()"" />
                    全選
                </label>
            </div>
        </div>
        <div class=""muti-selector"">
            <div class=""select-field"" id=""select-field1"">
                <input type=""text""");
            BeginWriteAttribute("name", " name=\"", 4479, "\"", 4486, 0);
            EndWriteAttribute();
            WriteLiteral(" placeholder=\"篩選醫生\" class=\"input-selector\" />\r\n                <span class=\"down-arrow\" id=\"down-arrow1\">&blacktriangledown;</span>\r\n            </div>\r\n            <div class=\"list\" id=\"list1\">\r\n                <label");
            BeginWriteAttribute("for", " for=\"", 4705, "\"", 4711, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""task"">
                    <input type=""checkbox"" class=""checkAll2"" onclick=""check_allDp()"" id=""d"" />
                    全選
                </label>
            </div>
        </div>
        <input id=""txtKeyword"" hidden=""hidden"" type=""text"" name=""txtKeyword""");
            BeginWriteAttribute("value", " value=\"", 4986, "\"", 4994, 0);
            EndWriteAttribute();
            WriteLiteral(" />\r\n        <input type=\"submit\" id=\"sub\" value=\"查詢\" class=\"btn btn-primary\" />\r\n        </div>\r\n");
#nullable restore
#line 185 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"

            }

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n            <div class=\"webShow row\"></div>\r\n");
            WriteLiteral(@"            <!-- Modal -->
            <div class=""modal fade"" id=""exampleModal"" tabindex=""-1"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
                <div class=""modal-dialog"">
                    <div class=""modal-content"">
                        <div class=""modal-header"">
                            <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                        </div>
                        <div id=""tbdRatingList"" class=""modal-body"">
");
            WriteLiteral(@"                        </div>
                        <div class=""modal-footer"">
                            <button type=""button"" class=""btn btn-secondary"" data-bs-dismiss=""modal"">離開</button>
                        </div>
                    </div>
                </div>
            </div>
            <footer style=""clear:both""></footer>
");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n                <script>\r\n        $(\'.buttonLoad\').click(function () {\r\n            var id = $(event.target).attr(\"data-docid\");\r\n            console.log(id);\r\n            $(\'#tbdRatingList\').load(\'");
#nullable restore
#line 212 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
                                 Write(Url.Content("~/Doctor/RatingDoctorpartail/"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + id )

        })
        const ck1 = document.querySelector('.checkAll1')
        const ck2 = document.querySelector('.checkAll2')
        function firstCheck() {
            document.getElementById(""c"").checked = true;
        }
        function firstCheck1() {
            document.getElementById(""d"").checked = true;
        }

");
                WriteLiteral(@"        function check_allDp() {
            var ckboxs = document.getElementsByClassName(""check1"")
            for (var i = 0; i < ckboxs.length; i++) {
                ckboxs[i].checked = !ckboxs[i].checked;
                if (ckboxs[i].checked == true)
                    loadWebDoc(ckboxs[i].name)
                else
                    cancelWebDoc(ckboxs[i].name)
            }
        }

");
                WriteLiteral(@"        function check_all() {

            var checkboxs = document.getElementsByClassName(""check"")

            for (var i = 0; i < checkboxs.length; i++) {

                checkboxs[i].checked = !checkboxs[i].checked;
                if (checkboxs[i].checked == true)
                    loadDoc(checkboxs[i].name);
                else
                    cancelDoc(checkboxs[i].name);
            }
        }

");
                WriteLiteral(@"        document.querySelector('.select-field').addEventListener('click', () => {
            document.querySelector('.list').classList.toggle('show');
            document.querySelector('.down-arrow').classList.toggle('rotate180')

        })
        document.querySelector('#select-field1').addEventListener('click', () => {
            document.querySelector('#list1').classList.toggle('show');
            document.querySelector('#down-arrow1').classList.toggle('rotate180')
        })


");
                WriteLiteral("        loadDep()\r\n\r\n\r\n");
                WriteLiteral("        async function cancelDoc(N) {\r\n                depName = N;\r\n                const trtDs = await fetch(\'");
#nullable restore
#line 270 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
                                      Write(Url.Content("~/Admin/AdminDoctor/Doc"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + `?depName=${depName}`).then(response => response.json());
                trtDs.forEach((DoctorName) => {
                    document.querySelector(`#${DoctorName}`).remove();
                    document.getElementById(`${DoctorName}Div`).remove();
                })
        }

");
                WriteLiteral("        async function cancelWebDoc(N) {\r\n            dcName = N;\r\n            const doctors = await fetch(\'");
#nullable restore
#line 280 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
                                    Write(Url.Content("~/doctor/GetDoctorWeb"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' + `?docName=${dcName}`).then(response => response.json());\r\n            doctors.forEach((DoctorName) => {\r\n                var div = document.getElementById(`${doctors[0].doctorName}Div`);\r\n                div.remove()\r\n            })\r\n        }\r\n\r\n");
                WriteLiteral("        function CCC() {\r\n            if ($(event.target)[0].checked == true) {\r\n                loadDoc($(event.target)[0].name);\r\n            }\r\n            else\r\n                cancelDoc($(event.target)[0].name);\r\n        }\r\n\r\n");
                WriteLiteral("        function DDD() {\r\n            if ($(event.target)[0].checked == true) {\r\n                loadWebDoc($(event.target)[0].name);\r\n            }\r\n            else\r\n                cancelWebDoc($(event.target)[0].name)\r\n        }\r\n\r\n\r\n");
                WriteLiteral("        async function loadDep() {\r\n\r\n            const deps = await fetch(\'");
#nullable restore
#line 309 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
                                 Write(Url.Content("~/Admin/AdminDoctor/Dep"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"').then(response => response.json())
            deps.forEach((DeptName) => {
                name =`<label for="""" class=""task"">
                       <input type=""checkbox"" class=""check"" onclick=""CCC()"" id=""${DeptName}"" name=""${DeptName}"" value=""${DeptName}""/>
                       ${DeptName}
                       </label>`;
                document.querySelector('.list').innerHTML += name;
            })
            firstCheck();
            check_all();
        }


");
                WriteLiteral("        async function loadDoc(N) {\r\n                depName =N/*($(event.target)[0].name);*/\r\n                const trtDs = await fetch(\'");
#nullable restore
#line 325 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
                                      Write(Url.Content("~/Admin/AdminDoctor/Doc"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + `?depName=${depName}`).then(response => response.json());
                trtDs.forEach((DoctorName) => {
                    name = `<label for="""" class=""task"" id=""${DoctorName}"">
                <input type=""checkbox"" class=""check1"" checked=""true"" name=""${DoctorName}"" onclick=""DDD()"" value=""${DoctorName}""/>
                ${DoctorName}
            </label>`;
                    document.querySelector('#list1').innerHTML += name;
                    loadWebDoc(`${DoctorName}`)
                })
            firstCheck1()
        }

");
                WriteLiteral("        async function loadWebDoc(dcname) {\r\n            docName = dcname;\r\n            const doctors = await fetch(\'");
#nullable restore
#line 340 "C:\Users\USER\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
                                    Write(Url.Content("~/doctor/GetDoctorWeb"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + `?docName=${docName}`).then(response => response.json());

            doctors.forEach((DoctorName)=> {
                web = `<div id=""${doctors[0].doctorName}Div"" class=""col-lg-4 col-md-6 col-12 doctor_item"">
            <div class=""team-item"">
                <div class=""position-relative rounded-top  listFCP"" style=""z-index: 1;"">
                    <img class=""img-fluid w-100 dcimg"" src=""/images/${doctors[0].picturePath}"">
                </div>
                <div>
                    <div class=""listFCN"">${doctors[0].doctorName}</div>
                    <div class=""listFCS"">${doctors[0].jobTitle}</div>
                    <div class=""listFCC"">學歷:${doctors[0].education}</div>
                    <div class=""d-flex justify-content-center"">
                        <button class = ""btn btn-outline-success detail"" >詳細資料</button>
                        <button type=""button"" id=""buttonLoad"" class=""btn btn-primary buttonLoad"" data-bs-toggle=""modal"" data-bs-target=""#exampleModal"" data-docid");
                WriteLiteral(@"=""doctors[0].DoctorID"">
                    查看評價
                    </button>
                    </div>
                </div>
            </div>
        </div>`;
                document.querySelector('.webShow').innerHTML += web;
            })
        }

                </script>
            ");
            }
            );
            WriteLiteral("\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<Medical.Models.Doctor>> Html { get; private set; }
    }
}
#pragma warning restore 1591
