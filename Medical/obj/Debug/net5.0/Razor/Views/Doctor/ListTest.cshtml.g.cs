#pragma checksum "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "faf93514c103772f6a84f9825a47f390d45a3f61"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Doctor_ListTest), @"mvc.1.0.view", @"/Views/Doctor/ListTest.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\_ViewImports.cshtml"
using Medical;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\_ViewImports.cshtml"
using Medical.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"faf93514c103772f6a84f9825a47f390d45a3f61", @"/Views/Doctor/ListTest.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"24de361111f0b04cb59052ed4f6ecd3219f4a4fd", @"/Views/_ViewImports.cshtml")]
    public class Views_Doctor_ListTest : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<Medical.Models.Doctor>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
  
    ViewData["Title"] = "ListTest";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            DefineSection("css", async() => {
                WriteLiteral(@"
    <style>
        .listFCN {
            color: #366ba8;
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #00EEFF;
        }

        .listFCS {
            font-size: 18px;
            height: 18px;
            line-height: 18px;
            margin-bottom: 6px;
            overflow: hidden;
            color: white;
        }

        .listFCC {
            color: white;
            font-size: 18px;
            height: 54px;
            line-height: 18px;
            overflow: hidden;
        }

        .container img {
            width: 100%;
        }

        .body {
            font-size: 18px;
            font-family: ""微軟正黑體"";
            font-weight: bold;
        }

        .listFCP {
            font-size: 0px;
            line-height: 0px;
            margin-bottom: 10px;
        }

        .input-selector {
            outline: none;
            border: none;
        }

        .muti-s");
                WriteLiteral(@"elector {
            width: max-content;
            float: left;
            padding-right: 4px
        }

        .select-field {
            border: 1px solid black;
        }

        .select-field, .task, .list {
            width: 100%;
            background-color: white;
        }

        .list {
            box-shadow: 0px 30px 60px rgb(0,0,0,0.2);
            display: none;
            position: absolute;
            width: 214.16px;
            z-index: 10;
        }

        .down-arrow {
            font-size: 1.2rem;
            cursor: pointer;
            display: inline-block;
            transition: 0.2s linear;
        }

        .task {
            display: block;
            padding-left: 0;
        }

            .task span {
                float: right;
                font-size: 0.6rem;
                padding-top: 6px;
            }

                .task span:hover {
                    background-color: aliceblue;
                }

  ");
                WriteLiteral(@"      .show {
            display: block;
        }

        .rotate180 {
            transform: rotate(180deg);
        }

        .detail {
            margin-left: 60px;
            margin-right: 60px;
        }

        .slideInUp {
            background-color: #5ED4D2;
            border: 0.2px #666;
            border-radius: 25px 25px 25px 25px;
            margin: 10px 5px 10px 5px;
        }

        #hateboot img {
            border-radius: 25px 25px 25px 25px !important;
            margin-top: 17px !important;
            position: relative;
        }

        .container .detail {
            color: #BCF7DA !important;
        }
    </style>

");
            }
            );
            WriteLiteral(@"<!-- Hero Start -->
<div class=""container-fluid bg-primary py-5 hero-header mb-5"">
    <div class=""row py-3"">
        <div class=""col-12 text-center"">
            <h3 class=""display-3 text-white animated zoomIn"">醫生清單</h3>
        </div>
    </div>
</div>
<!-- Hero End -->
<br>

");
#nullable restore
#line 142 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
 using (Html.BeginForm())
{

#line default
#line hidden
#nullable disable
            WriteLiteral("    <div>\r\n        <input type=\"button\" value=\"點我推薦醫生\"");
            BeginWriteAttribute("onclick", " onclick=\"", 3268, "\"", 3328, 3);
            WriteAttributeValue("", 3278, "location.href=\'", 3278, 15, true);
#nullable restore
#line 145 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
WriteAttributeValue("", 3293, Url.ActionLink("SugDoc","Doctor"), 3293, 34, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 3327, "\'", 3327, 1, true);
            EndWriteAttribute();
            WriteLiteral(" />\r\n    </div>\r\n    <div class=\"muti-selector\">\r\n        <div class=\"select-field\">\r\n            <input type=\"text\"");
            BeginWriteAttribute("name", " name=\"", 3445, "\"", 3452, 0);
            EndWriteAttribute();
            WriteLiteral(" placeholder=\"篩選專長\" class=\"input-selector\" />\r\n            <span class=\"down-arrow\">&blacktriangledown;</span>\r\n\r\n        </div>\r\n        <div class=\"list\">\r\n            <label");
            BeginWriteAttribute("for", " for=\"", 3629, "\"", 3635, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""task"">
                <input type=""checkbox"" class=""checkAll1"" name=""123"" id=""c"" onclick=""check_all()""/>
                全選
            </label>
        </div>
    </div>
    <div class=""muti-selector"">
        <div class=""select-field"" id=""select-field1"">
            <input type=""text""");
            BeginWriteAttribute("name", " name=\"", 3940, "\"", 3947, 0);
            EndWriteAttribute();
            WriteLiteral(" placeholder=\"篩選醫生\" class=\"input-selector\" />\r\n            <span class=\"down-arrow\" id=\"down-arrow1\">&blacktriangledown;</span>\r\n        </div>\r\n        <div class=\"list\" id=\"list1\">\r\n            <label");
            BeginWriteAttribute("for", " for=\"", 4150, "\"", 4156, 0);
            EndWriteAttribute();
            WriteLiteral(" class=\"task\">\r\n                <input type=\"checkbox\" class=\"checkAll2\" onclick=\"check_allDp()\" id=\"d\"/>\r\n                全選\r\n            </label>\r\n        </div>\r\n    </div>\r\n    <input id=\"txtKeyword\" hidden=\"hidden\" type=\"text\" name=\"txtKeyword\"");
            BeginWriteAttribute("value", " value=\"", 4406, "\"", 4414, 0);
            EndWriteAttribute();
            WriteLiteral(" />\r\n    <input type=\"submit\" id=\"sub\" value=\"查詢\" />\r\n");
#nullable restore
#line 174 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
}

#line default
#line hidden
#nullable disable
            WriteLiteral("<div><br /></div>\r\n<div class=\"webShow\"></div>\r\n");
#nullable restore
#line 177 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
   int count = 0;
    

#line default
#line hidden
#nullable disable
            WriteLiteral(" <footer style=\"clear:both\"></footer>\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        const ck1 = document.querySelector('.checkAll1')
        const ck2 = document.querySelector('.checkAll2')
        function firstCheck() {
            document.getElementById(""c"").checked = true;
        }
        function firstCheck1() {
            document.getElementById(""d"").checked = true;
        }
        function check_allDp() {
            var ckboxs = document.getElementsByClassName(""check1"")
            for (var i = 0; i < ckboxs.length; i++) {
                ckboxs[i].checked = !ckboxs[i].checked;
                if (ckboxs[i].checked == true)
                    loadWebDoc(ckboxs[i].name)
                else
                    cancelWebDoc(ckboxs[i].name)
            }
        }  
        async function check_all() {
            
            var checkboxs = document.getElementsByClassName(""check"")
            await (()=> {
                for (var i = 0; i < checkboxs.length; i++) {

                    checkboxs[i].checked = !checkboxs[i].checked");
                WriteLiteral(@";
                    if (checkboxs[i].checked == true)
                        loadDoc(checkboxs[i].name)
                    else
                        cancelDoc(checkboxs[i].name)
                }
            })
            await check_allDp();
        }
");
                WriteLiteral(@"        document.querySelector('.select-field').addEventListener('click', () => {
            document.querySelector('.list').classList.toggle('show');
            document.querySelector('.down-arrow').classList.toggle('rotate180')

        })
        document.querySelector('#select-field1').addEventListener('click', () => {
            document.querySelector('#list1').classList.toggle('show');
            document.querySelector('#down-arrow1').classList.toggle('rotate180')
        })
        loadDep()
");
                WriteLiteral("        async function cancelDoc(N) {\r\n                depName = N;\r\n                const trtDs = await fetch(\'");
#nullable restore
#line 247 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
                                      Write(Url.Content("~/Admin/AdminDoctor/Doc"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' + `?depName=${depName}`).then(response => response.json());\r\n                trtDs.forEach((DoctorName) => {\r\n                    document.querySelector(`#${DoctorName}`).remove();\r\n                })\r\n        }\r\n");
                WriteLiteral("        async function cancelWebDoc(N) {\r\n            dcName = N;\r\n            const doctors = await fetch(\'");
#nullable restore
#line 255 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
                                    Write(Url.Content("~/doctor/GetDoctorWeb"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + `?docName=${dcName}`).then(response => response.json());
            doctors.forEach((DoctorName) => {
                var div = document.getElementById(`${doctors[0].doctorName}Div`);
                div.remove()
            })
        }
        


        function CCC() {
            if ($(event.target)[0].checked == true) {
                loadDoc($(event.target)[0].name);
            }
            else
                cancelDoc($(event.target)[0].name);
        }
        function DDD() {
            if ($(event.target)[0].checked == true) {
                loadWebDoc($(event.target)[0].name);
            }
            else
                cancelWebDoc($(event.target)[0].name)
        }
        //$(function () {
        //    //全選被按
        //    $("".checkAll"").click(function () {
        //        var isCheck = $(this).prop(""checked"");
        //        $(this).closest("".muti-selector"").find(""input[name='check']"").prop(""checked"", isCheck);
        //    });

        //   ");
                WriteLiteral(@" $("".checkAllWrap input[name='check']"").click(function () {

        //        var el_checkAll = $(this).closest("".muti-selector"").find("".checkAll"");

        //        var checkLength = $(this).closest("".muti-selector"").find(""input[name='check']:checked"").length;// 每區塊目前被V的有幾個

        //        var inputLength =
        //            $(this).closest("".muti-selector"").find(""input[name='check']"").length; // 每區塊的核取框有多少


        //        if (!$(this).prop(""checked"")) {
        //            el_checkAll.prop(""checked"", false);
        //        } else {
        //            if (checkLength == inputLength) {
        //                el_checkAll.prop(""checked"", true);
        //            }
        //        }
        //    });

        //});
");
                WriteLiteral("        async function loadDep() {\r\n\r\n            const deps = await fetch(\'");
#nullable restore
#line 308 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
                                 Write(Url.Content("~/Admin/AdminDoctor/Dep"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"').then(response => response.json())
            deps.forEach((DeptName) => {                
                name =`<label for="""" class=""task"">
                <input type=""checkbox"" class=""check"" onclick=""CCC()"" id=""${DeptName}"" name=""${DeptName}"" value=""${DeptName}""/>
                ${DeptName}
            </label>`;
                document.querySelector('.list').innerHTML += name;
            })
            firstCheck();
            check_all();
        }
");
                WriteLiteral("        async function loadDoc(N) {\r\n                depName =N/*($(event.target)[0].name);*/\r\n                const trtDs = await fetch(\'");
#nullable restore
#line 322 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
                                      Write(Url.Content("~/Admin/AdminDoctor/Doc"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + `?depName=${depName}`).then(response => response.json());
                trtDs.forEach((DoctorName) => {
                    name = `<label for="""" class=""task"" id=""${DoctorName}"">
                <input type=""checkbox"" class=""check1"" name=""${DoctorName}"" onclick=""DDD()"" value=""${DoctorName}""/>
                ${DoctorName}
            </label>`;
                    document.querySelector('#list1').innerHTML += name;                    
                })
            firstCheck1();
        }




");
                WriteLiteral("        async function loadWebDoc(dcname) {\r\n            docName = dcname;\r\n            const doctors = await fetch(\'");
#nullable restore
#line 339 "C:\Users\Student\source\repos\MedicalFinal-new-\Medical\Views\Doctor\ListTest.cshtml"
                                    Write(Url.Content("~/doctor/GetDoctorWeb"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + `?docName=${docName}`).then(response => response.json());

            doctors.forEach((DoctorName)=> {
                web = `<div id=""${doctors[0].doctorName}Div"" class=""col-lg-4 wow slideInUp"" data-wow-delay=""0.3s"" style=""float:left;width:20%;"">
            <div class=""team-item"" style=""padding: 0 9px 25px 9px;"">
                <div class=""position-relative rounded-top  container listFCP"" style=""z-index: 1;"">
                    <img id=""img"" class=""img-fluid rounded-top w-100 dcimg"" src=""/images/${doctors[0].picturePath}"" style=""width:204px;height:204px;"">

                </div>
                <div class=""container"">
                    <div class=""listFCN"">${doctors[0].doctorName}</div>
Url Content                   <div class=""listFCS"">${doctors[0].jobTitle}</div>
                    <div class=""listFCC"">學歷:${doctors[0].education}</div>
                    <button class = ""btn btn-outline-success detail"" >詳細資料<button/>
                </div>
            </div>
        </div>`;
  ");
                WriteLiteral("              document.querySelector(\'.webShow\').innerHTML += web;\r\n            })\r\n        }\r\n\r\n    </script>\r\n");
            }
            );
            WriteLiteral("\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<Medical.Models.Doctor>> Html { get; private set; }
    }
}
#pragma warning restore 1591
