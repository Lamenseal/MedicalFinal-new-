@*@model Medical.ViewModels.CDoctorDetailViewModel*@
@model IEnumerable<Medical.Models.Doctor>
@{
    ViewData["Title"] = "ListTest";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>ListTest</h1>
@*@using (Html.BeginForm())
    {
        <div class="row">
            <div class="col-md-4">
                <form asp-action="depEdit">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <select id="select1">選擇科別</select>
                    <div class="form-group">
                        <label asp-for="DepName" class="control-label"></label>
                        <input asp-for="DepName" class="form-control" id="dpc" />
                        <span asp-validation-for="DepName" class="text-danger"></span>
                    </div>
                    <select id="select2">選擇專長</select>
                    <div class="form-group">
                        <label asp-for="DoctorName" class="control-label"></label>
                        <input asp-for="DoctorName" class="form-control" id="dpn" />
                        <span asp-validation-for="DoctorName" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Create" class="btn btn-primary" />
                    </div>
                </form>
            </div>
        </div>*@
@using (Html.BeginForm())
{
@:關鍵字 @Html.TextBox("txtKeyword")
<input type="submit" value="查詢" />}
}@{ int count = 0;
    foreach (var item in Model)
    {
        count++;
        <div class="col-lg-4 wow slideInUp" data-wow-delay="0.3s" style="float:left">
            <div class="team-item">
                <div class="team-text position-relative bg-light text-center rounded-bottom p-4 pt-5">
                    <h4 class="mb-2">@Html.DisplayFor(modelItem => item.DoctorName)</h4>
                    <p class="text-primary mb-0">醫生</p>
                </div>
                <div class="position-relative rounded-top  container" style="z-index: 1;">
                    <img id="img" class="img-fluid rounded-top w-100" src="~/img/@Html.DisplayFor(modelItem => item.PicturePath)" style="width:640px;height:480px;">
                    <div class="container">
                        <h5 class="title">@Html.DisplayFor(modelItem => item.JobTitle)</h5>
                        <h5> @Html.DisplayFor(modelItem => item.Education).</h5>
                    </div>
                    @*<div class="position-absolute top-100 start-50 translate-middle bg-light rounded p-2 d-flex">
                            <a class="btn btn-primary btn-square m-1" href="#"><i class="fab fa-twitter fw-normal"></i></a>
                            <a class="btn btn-primary btn-square m-1" href="#"><i class="fab fa-facebook-f fw-normal"></i></a>
                            <a class="btn btn-primary btn-square m-1" href="#"><i class="fab fa-linkedin-in fw-normal"></i></a>
                            <a class="btn btn-primary btn-square m-1" href="#"><i class="fab fa-instagram fw-normal"></i></a>
                        </div>*@
                </div>

            </div>
        </div>
    }
}
@section Scripts{

    @*@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
        <script>
        const selDepC = document.querySelector("#select1");
        const selDep = document.querySelector("#select2");
        const txtDpc = document.querySelector("#dpc");
        const txtDpn = document.querySelector("#dpn");
        selDepC.addEventListener("change", () =>
        {
            txtDpc.value = selDepC.value;
            getDep();
        })
        getDep();
        selDep.addEventListener("change", () => {
            txtDpn.value = selDep.value;
        })
        async function getDep()
        {
            $("#select1").empty();
            const depCs = await fetch('@Url.Content("~/Doctor/getDep")').then(response => response.json());
            depCs.forEach((DepName) =>
            {
                const opt = new Option(DepName, DepName);

                selDepC.options.add(opt);

            })
            const str = new Option("新增科別", "depC");
            selDepC.options.add(str);
            getDep();
        }
        async function getDoc()
        {
            depStr =  selDepC.options[selDepC.selectedIndex].value;
            $("#select2").empty();
            const deps = await fetch('@Url.Content("~/Doctor/getDoc")'+`?DepName=${depStr}`).then(response => response.json());
            console.log(deps);
            deps.forEach((DoctorName) => {
                const opt = new Option(DoctorName, DoctorName);

                selDep.options.add(opt);

            })
            const str = new Option("新增專長", "dep");
            selDep.options.add(str);
        }
        </script>*@

}

